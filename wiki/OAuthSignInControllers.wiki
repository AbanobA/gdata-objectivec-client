#summary OAuth Controllers for iPhone and Mac Apps

= Using the OAuth Controllers =

== Introduction ==

[http://oauth.net/ OAuth] is a protocol allowing your application to obtain authorization to read or modify a user’s files or data on an external server.

The server generates a web page for the user to sign in with her name and password, including a button explicitly granting access to some of her data. Upon successful authentication, the server gives tokens to your application representing the user's authorization.

With the Objective-C OAuth controllers, the web page can be presented as an iPhone view or Mac sheet within your application. The controllers also provide authentication objects that simplify your application's future requests for the user's data.

== Using the iPhone and Mac OAuth Controllers ==

The OAuth controllers are part of the Google Data APIs Objective-C Client Library, but you can easily use them independent of the library as well. You can also use them for authenticating via OAuth to servers and services other than Google's.

There are example iPhone and Mac applications using the OAuth controllers in the library's [http://code.google.com/p/gdata-objectivec-client/source/browse/#svn/trunk/Examples Examples directory], and a project for building an iPhone static library is included in the library's [http://code.google.com/p/gdata-objectivec-client/source/browse/#svn/trunk/Source Source directory].

=== Signing In ===

To display a sign-in view, your iPhone application makes these calls to push the view:
{{{
#import "GDataOAuthViewControllerTouch.h"

static NSString *const kAppServiceName = @”My Application: Google Contacts”;

NSString *scope = @"http://www.google.com/m8/feeds/";

GDataOAuthViewControllerTouch *viewController;
viewController = [[[GDataOAuthViewControllerTouch alloc] initWithScope:scope
                                                              language:nil
                                                        appServiceName:kAppServiceName
                                                              delegate:self
                             finishedSelector:@selector(viewController:finishedWithAuth:error:)] autorelease];
                             
[[self navigationController] pushViewController:viewController animated:YES];
}}}

A Mac application would display sign-in as a sheet on the current window, like this:

{{{
#import "GDataOAuthWindowController.h"

GDataOAuthWindowController *windowController;
windowController = [[[GDataOAuthWindowController alloc] initWithScope:scope
                                                             language:nil
                                                       appServiceName:kAppServiceName
                                                       resourceBundle:nil] autorelease];
[windowController signInSheetModalForWindow:currentWindow
                                  delegate:self
                          finishedSelector:@selector(windowController:finishedWithAuth:error:)];
}}}
The “scope” is a string identifying what access is being requested. For access to more than one scope, separate them with a space. If your application uses the Google Data APIs Objective-C Client Library, it can get scopes from the service classes. For example, the scope of the Contacts API shown above is available as
{{{
 scope = [GDataServiceGoogleContacts authorizationScope];
}}}
The “displayName” is shown to users in the web view when signing in, and is also displayed on the [http://google.com/accounts Google accounts page] that allows the user to later revoke their authorizations.

The “application service name” is used to save the token on the user’s keychain, and should identify both your application name and the service name(s). If appServiceName is nil, the token will not be saved, and the user will have to sign in again the next time the application is run.

When the user signs in successfully or cancels signing in, the view or window controller will invoke your finishedSelector’s method:
{{{
- (void)viewController:(GDataOAuthViewControllerTouch *)viewController
     finishedWithAuth:(GDataOAuthAuthentication *)auth
                error:(NSError *)error {
 if (error != nil) {
   // Authentication failed
 } else {
   // Authentication succeeded
 }
}
}}}

=== Using the Authentication Tokens ===

If authentication succeeds, your application should retain the authentication object. It can be either stored into a library service object to authorize future API requests:

{{{
[[self contactService] setAuthorizer:auth];
}}}

or used directly to authorize NSMutableURLRequest objects:

{{{
[auth authorizeRequest:myNSURLMutableRequest]
}}}

=== Retrieving Authorization from the Keychain ===

If your application saves the authorization to the keychain (by setting the controller's appServiceName), the authentication can be retrieved the next time the application launches:

{{{
GDataOAuthAuthentication *auth;
auth = [GDataOAuthViewControllerTouch authForGoogleFromKeychainForName:kAppServiceName];
}}}

If no authorization was saved, then “auth” will still be a valid authorization object but will be unable to authorize requests:

{{{
 BOOL isSignedIn = [auth canAuthorize]; // returns NO if auth cannot authorize requests
}}}

=== Signing Out ===

To completely discard the user’s authorization, use these calls to remove the keychain entry and to ask the Google server to revoke the token:
{{{
 [GDataOAuthViewControllerTouch removeParamsFromKeychainForName:kAppServiceName];

 [GDataOAuthViewControllerTouch revokeTokenForGoogleAuthentication:auth];
}}}

Finally, release the authorization object.