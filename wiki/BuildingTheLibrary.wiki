#summary Adding the Google Data API Objective-C Client Library to a Project
#labels Featured

<wiki:toc max_depth="4" />

= Adding the Google Data APIs to a Project =

The Google Data APIs Objective-C Client Library is provided as a built framework, suitable for inclusion in a Mac application bundle's Frameworks folder, and as a static library for iPhone applications.  Alternatively, the sources may also be compiled directly into a Mac or an iPhone application.

== Linking to the Mac OS X Framework ==

To add the framework to an Xcode project, drag GData.framework to the project's Linked Frameworks source group, then drag the GData framework from the  Linked Frameworks group folder to the Link Binary With Library phase inside of the application target.  

Source files referring to GData objects should include either the full GData headers as 

`#import "GData/GData.h"`

or the header for a specific service, such as

`#import "GData/GDataCalendar.h"`

The GData source code and the project for building the framework are also provided. To facilitate debugging, you may opt to include the GData.xcodeproj project or the GData source files directly in your application project as a [http://developer.apple.com/IPhone/library/documentation/DeveloperTools/Conceptual/XcodeProjectManagement/130-Files_in_Projects/project_files.html#//apple_ref/doc/uid/TP40002666-CJBJHJCJ cross-project reference].  The example applications show how to include a reference to the GData framework project file in an Xcode project.

*_Tip_*: if Xcode's debugger is ignoring breakpoints set in the framework, turn off the [http://developer.apple.com/mac/library/documentation/DeveloperTools/Conceptual/XcodeDebugging/920-Debugging_Preferences/debugging_preferences.html "Load symbols lazily" option] in Xcode's Debugging preferences.

== Linking to the iPhone Static Library ==

*_New since version 1.8:_*

The library project file in the top-of-trunk sources now includes a target for building a static library for iPhone and iPod Touch apps; this avoids dragging individual library source files into the iPhone application's project.

To build with the static library, drag the GData project file itself into an iPhone project to make a [http://developer.apple.com/IPhone/library/documentation/DeveloperTools/Conceptual/XcodeProjectManagement/130-Files_in_Projects/project_files.html#//apple_ref/doc/uid/TP40002666-CJBJHJCJ cross-project reference], add the GDataTouchStaticLib target as [http://developer.apple.com/IPhone/library/documentation/DeveloperTools/Conceptual/XcodeBuildSystem/100-Targets/bs_targets.html#//apple_ref/doc/uid/TP40002689-SW11 a dependency] for building the app, and add the [http://developer.apple.com/mac/library/qa/qa2006/qa1490.html -ObjC link option] to the app. Also add the above defines to the GData project so that it won't compile unneeded services.

The static library build also creates a directory of header files that should be dragged into your application project. With the static library linked into your project, refer directly to the headers by omitting the framework name, like

`#import "GDataCalendar.h"`

== Compiling the Source Files Directly into a Mac or iPhone Application ==

Rather than link to the GData framework, you can compile the GData library sources directly into your own project. To do this, drag the GData Sources source group from the GData Xcode project into your project's window (add by reference, not by copying the files.)  

You can delete the references to the client services (Calendar, Contacts, Spreadsheet, and so on) that are not needed by your application, though they will not be compiled if you set the compiler flags described below in "Removing Unneeded Code."


If you compile the project's source files directly into your own project file, set this build setting:

 C Language Dialect: `C99 [-std=c99]`

Search the build settings for "c99" to find the setting. If it's not present as a build  option, and if a compile error requires c99, then set the equivalent user-defined setting:

  `GCC_C_LANGUAGE_STANDARD=c99`

For just the Debug configuration of your target, add this compiler definition to ensure that the library's debug-only code is included:

 Other C Flags: `-DDEBUG=1`

Or, if the Other C Flags setting is not available in your target's build options, set the equivalent user-defined setting:

  `OTHER_CFLAGS=-DDEBUG=1`

*_Note for iPhone apps_*: Be sure that the files GDataXMLNode.m and GDataXMLNode.h in the Common/Optional/XMLSupport group are included in your project.  They are required for iPhone builds.

With the source files compiled directly in your project, refer directly to the headers by omitting the framework name, like

`#import "GDataCalendar.h"`

== Additional Settings for Development with the iPhone SDK ==

Add these build settings needed by GDataXMLNode to your project or target:

 Header Search Paths: `/usr/include/libxml2`

 Other Linker Flags:  `-lxml2`

== Removing Unneeded Code ==

*_New since library version 1.8:_*

However you build the library, it is worthwhile to remove code for the services that your application will not be using. To remove unneeded code, set these compile flags in the top-level project settings of the GData.xcodeproj. When compiling the sources directly into your application, set these flags in your project's settings.

The conditional flags in each source file look something like this:
{{{
#if !GDATA_REQUIRE_SERVICE_INCLUDES || GDATA_INCLUDE_CONTACTS_SERVICE
}}}
So if your project is building on the top-of-trunk sources, in either the
project file settings for compile flags or in your project config file, set
`GDATA_REQUIRE_SERVICE_INCLUDES` to 1, along with the services you are using.
For example,
{{{
-DGDATA_REQUIRE_SERVICE_INCLUDES=1 -DGDATA_INCLUDE_CONTACTS_SERVICE=1 
}}}